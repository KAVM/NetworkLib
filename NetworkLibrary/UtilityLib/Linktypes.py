import struct

linkTypeIntToStr={
	0:"LINKTYPE_NULL",
	1:"LINKTYPE_ETHERNET",
	2:"LINKTYPE_EXP_ETHERNET",
	3:"LINKTYPE_AX25",
	4:"LINKTYPE_PRONET",
	5:"LINKTYPE_CHAOS",
	6:"LINKTYPE_TOKEN_RING",
	7:"LINKTYPE_ARCNET",
	8:"LINKTYPE_SLIP",
	9:"LINKTYPE_PPP",
	10:"LINKTYPE_FDDI",
	50:"LINKTYPE_PPP_HDLC",
	51:"LINKTYPE_PPP_ETHER",
	99:"LINKTYPE_SYMANTEC_FIREWALL",
	100:"LINKTYPE_ATM_RFC1483",
	101:"LINKTYPE_RAW",
	102:"LINKTYPE_SLIP_BSDOS",
	103:"LINKTYPE_PPP_BSDOS",
	104:"LINKTYPE_C_HDLC",
	105:"LINKTYPE_IEEE802_11",
	106:"LINKTYPE_ATM_CLIP",
	107:"LINKTYPE_FRELAY",
	108:"LINKTYPE_LOOP",
	109:"LINKTYPE_ENC",
	110:"LINKTYPE_LANE8023",
	111:"LINKTYPE_HIPPI",
	112:"LINKTYPE_HDLC",
	113:"LINKTYPE_LINUX_SLL",
	114:"LINKTYPE_LTALK",
	115:"LINKTYPE_ECONET",
	116:"LINKTYPE_IPFILTER",
	117:"LINKTYPE_PFLOG",
	118:"LINKTYPE_CISCO_IOS",
	119:"LINKTYPE_PRISM_HEADER",
	120:"LINKTYPE_AIRONET_HEADER",
	121:"LINKTYPE_HHDLC",
	122:"LINKTYPE_IP_OVER_FC",
	123:"LINKTYPE_SUNATM",
	124:"LINKTYPE_RIO",
	125:"LINKTYPE_PCI_EXP",
	126:"LINKTYPE_AURORA",
	127:"LINKTYPE_IEEE802_11_RADIO",
	128:"LINKTYPE_TZSP",
	129:"LINKTYPE_ARCNET_LINUX",
	130:"LINKTYPE_JUNIPER_MLPPP",
	131:"LINKTYPE_JUNIPER_MLFR",
	132:"LINKTYPE_JUNIPER_ES",
	133:"LINKTYPE_JUNIPER_GGSN",
	134:"LINKTYPE_JUNIPER_MFR",
	135:"LINKTYPE_JUNIPER_ATM2",
	136:"LINKTYPE_JUNIPER_SERVICES",
	137:"LINKTYPE_JUNIPER_ATM1",
	138:"LINKTYPE_APPLE_IP_OVER_IEEE1394",
	139:"LINKTYPE_MTP2_WITH_PHDR",
	140:"LINKTYPE_MTP2",
	141:"LINKTYPE_MTP3",
	142:"LINKTYPE_SCCP",
	143:"LINKTYPE_DOCSIS",
	144:"LINKTYPE_LINUX_IRDA",
	145:"LINKTYPE_IBM_SP",
	163:"LINKTYPE_IEEE802_11_AVS",
	165:"LINKTYPE_BACNET_MS_TP",
	166:"LINKTYPE_PPP_PPPD",
	169:"LINKTYPE_GPRS_LLC",
	170:"LINKTYPE_GPF_T",
	171:"LINKTYPE_GPF_F",
	177:"LINKTYPE_LINUX_LAPD",
	187:"LINKTYPE_BLUETOOTH_HCI_H4",
	189:"LINKTYPE_USB_LINUX",
	192:"LINKTYPE_PPI",
	195:"LINKTYPE_IEEE802_15_4",
	196:"LINKTYPE_SITA",
	197:"LINKTYPE_ERF",
	201:"LINKTYPE_BLUETOOTH_HCI_H4_WITH_PHDR",
	202:"LINKTYPE_AX25_KISS",
	203:"LINKTYPE_LAPD",
	204:"LINKTYPE_PPP_WITH_DIR",
	205:"LINKTYPE_C_HDLC_WITH_DIR",
	206:"LINKTYPE_FRELAY_WITH_DIR",
	209:"LINKTYPE_IPMB_LINUX",
	215:"LINKTYPE_IEEE802_15_4_NONASK_PHY",
	220:"LINKTYPE_USB_LINUX_MMAPPED",
	224:"LINKTYPE_FC_2",
	225:"LINKTYPE_FC_2_WITH_FRAME_DELIMS",
	226:"LINKTYPE_IPNET",
	227:"LINKTYPE_CAN_SOCKETCAN",
	228:"LINKTYPE_IPV4",
	229:"LINKTYPE_IPV6",
	230:"LINKTYPE_IEEE802_15_4_NOFCS",
	231:"LINKTYPE_DBUS",
	235:"LINKTYPE_DVB_CI",
	236:"LINKTYPE_MUX27010",
	237:"LINKTYPE_STANAG_5066_D_PDU",
	239:"LINKTYPE_NFLOG",
	240:"LINKTYPE_NETANALYZER",
	241:"LINKTYPE_NETANALYZER_TRANSPARENT",
	242:"LINKTYPE_IPOIB",
	243:"LINKTYPE_MPEG_2_TS",
	244:"LINKTYPE_NG40",
	245:"LINKTYPE_NFC_LLCP",
	247:"LINKTYPE_INFINIBAND",
	248:"LINKTYPE_SCTP",
	249:"LINKTYPE_USBPCAP",
	250:"LINKTYPE_RTAC_SERIAL",
	251:"LINKTYPE_BLUETOOTH_LE_LL",
	253:"LINKTYPE_NETLINK",
	254:"LINKTYPE_BLUETOOTH_LINUX_MONITOR",
	255:"LINKTYPE_BLUETOOTH_BREDR_BB",
	256:"LINKTYPE_BLUETOOTH_LE_LL_WITH_PHDR",
	257:"LINKTYPE_PROFIBUS_DL",
	258:"LINKTYPE_PKTAP",
	259:"LINKTYPE_EPON",
	260:"LINKTYPE_IPMI_HPM_2",
	261:"LINKTYPE_ZWAVE_R1_R2",
	262:"LINKTYPE_ZWAVE_R3",
	263:"LINKTYPE_WATTSTOPPER_DLM",
	264:"LINKTYPE_ISO_14443",
	265:"LINKTYPE_RDS",
	266:"LINKTYPE_USB_DARWIN"
}


LINKTYPE_NULL_INT=0
LINKTYPE_NULL_PACKED_BE=struct.pack(">I",0)
LINKTYPE_NULL_PACKED_LE=struct.pack("<I",0)
LINKTYPE_NULL_STRING="LINKTYPE_NULL"

LINKTYPE_ETHERNET_INT=1
LINKTYPE_ETHERNET_PACKED_BE=struct.pack(">I",1)
LINKTYPE_ETHERNET_PACKED_LE=struct.pack("<I",1)
LINKTYPE_ETHERNET_STRING="LINKTYPE_ETHERNET"

LINKTYPE_EXP_ETHERNET_INT=2
LINKTYPE_EXP_ETHERNET_PACKED_BE=struct.pack(">I",2)
LINKTYPE_EXP_ETHERNET_PACKED_LE=struct.pack("<I",2)
LINKTYPE_EXP_ETHERNET_STRING="LINKTYPE_EXP_ETHERNET"

LINKTYPE_AX25_INT=3
LINKTYPE_AX25_PACKED_BE=struct.pack(">I",3)
LINKTYPE_AX25_PACKED_LE=struct.pack("<I",3)
LINKTYPE_AX25_STRING="LINKTYPE_AX25"

LINKTYPE_PRONET_INT=4
LINKTYPE_PRONET_PACKED_BE=struct.pack(">I",4)
LINKTYPE_PRONET_PACKED_LE=struct.pack("<I",4)
LINKTYPE_PRONET_STRING="LINKTYPE_PRONET"

LINKTYPE_CHAOS_INT=5
LINKTYPE_CHAOS_PACKED_BE=struct.pack(">I",5)
LINKTYPE_CHAOS_PACKED_LE=struct.pack("<I",5)
LINKTYPE_CHAOS_STRING="LINKTYPE_CHAOS"

LINKTYPE_TOKEN_RING_INT=6
LINKTYPE_TOKEN_RING_PACKED_BE=struct.pack(">I",6)
LINKTYPE_TOKEN_RING_PACKED_LE=struct.pack("<I",6)
LINKTYPE_TOKEN_RING_STRING="LINKTYPE_TOKEN_RING"

LINKTYPE_ARCNET_INT=7
LINKTYPE_ARCNET_PACKED_BE=struct.pack(">I",7)
LINKTYPE_ARCNET_PACKED_LE=struct.pack("<I",7)
LINKTYPE_ARCNET_STRING="LINKTYPE_ARCNET"

LINKTYPE_SLIP_INT=8
LINKTYPE_SLIP_PACKED_BE=struct.pack(">I",8)
LINKTYPE_SLIP_PACKED_LE=struct.pack("<I",8)
LINKTYPE_SLIP_STRING="LINKTYPE_SLIP"

LINKTYPE_PPP_INT=9
LINKTYPE_PPP_PACKED_BE=struct.pack(">I",9)
LINKTYPE_PPP_PACKED_LE=struct.pack("<I",9)
LINKTYPE_PPP_STRING="LINKTYPE_PPP"

LINKTYPE_FDDI_INT=10
LINKTYPE_FDDI_PACKED_BE=struct.pack(">I",10)
LINKTYPE_FDDI_PACKED_LE=struct.pack("<I",10)
LINKTYPE_FDDI_STRING="LINKTYPE_FDDI"

LINKTYPE_PPP_HDLC_INT=50
LINKTYPE_PPP_HDLC_PACKED_BE=struct.pack(">I",50)
LINKTYPE_PPP_HDLC_PACKED_LE=struct.pack("<I",50)
LINKTYPE_PPP_HDLC_STRING="LINKTYPE_PPP_HDLC"

LINKTYPE_PPP_ETHER_INT=51
LINKTYPE_PPP_ETHER_PACKED_BE=struct.pack(">I",51)
LINKTYPE_PPP_ETHER_PACKED_LE=struct.pack("<I",51)
LINKTYPE_PPP_ETHER_STRING="LINKTYPE_PPP_ETHER"

LINKTYPE_SYMANTEC_FIREWALL_INT=99
LINKTYPE_SYMANTEC_FIREWALL_PACKED_BE=struct.pack(">I",99)
LINKTYPE_SYMANTEC_FIREWALL_PACKED_LE=struct.pack("<I",99)
LINKTYPE_SYMANTEC_FIREWALL_STRING="LINKTYPE_SYMANTEC_FIREWALL"

LINKTYPE_ATM_RFC1483_INT=100
LINKTYPE_ATM_RFC1483_PACKED_BE=struct.pack(">I",100)
LINKTYPE_ATM_RFC1483_PACKED_LE=struct.pack("<I",100)
LINKTYPE_ATM_RFC1483_STRING="LINKTYPE_ATM_RFC1483"

LINKTYPE_RAW_INT=101
LINKTYPE_RAW_PACKED_BE=struct.pack(">I",101)
LINKTYPE_RAW_PACKED_LE=struct.pack("<I",101)
LINKTYPE_RAW_STRING="LINKTYPE_RAW"

LINKTYPE_SLIP_BSDOS_INT=102
LINKTYPE_SLIP_BSDOS_PACKED_BE=struct.pack(">I",102)
LINKTYPE_SLIP_BSDOS_PACKED_LE=struct.pack("<I",102)
LINKTYPE_SLIP_BSDOS_STRING="LINKTYPE_SLIP_BSDOS"

LINKTYPE_PPP_BSDOS_INT=103
LINKTYPE_PPP_BSDOS_PACKED_BE=struct.pack(">I",103)
LINKTYPE_PPP_BSDOS_PACKED_LE=struct.pack("<I",103)
LINKTYPE_PPP_BSDOS_STRING="LINKTYPE_PPP_BSDOS"

LINKTYPE_C_HDLC_INT=104
LINKTYPE_C_HDLC_PACKED_BE=struct.pack(">I",104)
LINKTYPE_C_HDLC_PACKED_LE=struct.pack("<I",104)
LINKTYPE_C_HDLC_STRING="LINKTYPE_C_HDLC"

LINKTYPE_IEEE802_11_INT=105
LINKTYPE_IEEE802_11_PACKED_BE=struct.pack(">I",105)
LINKTYPE_IEEE802_11_PACKED_LE=struct.pack("<I",105)
LINKTYPE_IEEE802_11_STRING="LINKTYPE_IEEE802_11"

LINKTYPE_ATM_CLIP_INT=106
LINKTYPE_ATM_CLIP_PACKED_BE=struct.pack(">I",106)
LINKTYPE_ATM_CLIP_PACKED_LE=struct.pack("<I",106)
LINKTYPE_ATM_CLIP_STRING="LINKTYPE_ATM_CLIP"

LINKTYPE_FRELAY_INT=107
LINKTYPE_FRELAY_PACKED_BE=struct.pack(">I",107)
LINKTYPE_FRELAY_PACKED_LE=struct.pack("<I",107)
LINKTYPE_FRELAY_STRING="LINKTYPE_FRELAY"

LINKTYPE_LOOP_INT=108
LINKTYPE_LOOP_PACKED_BE=struct.pack(">I",108)
LINKTYPE_LOOP_PACKED_LE=struct.pack("<I",108)
LINKTYPE_LOOP_STRING="LINKTYPE_LOOP"

LINKTYPE_ENC_INT=109
LINKTYPE_ENC_PACKED_BE=struct.pack(">I",109)
LINKTYPE_ENC_PACKED_LE=struct.pack("<I",109)
LINKTYPE_ENC_STRING="LINKTYPE_ENC"

LINKTYPE_LANE8023_INT=110
LINKTYPE_LANE8023_PACKED_BE=struct.pack(">I",110)
LINKTYPE_LANE8023_PACKED_LE=struct.pack("<I",110)
LINKTYPE_LANE8023_STRING="LINKTYPE_LANE8023"

LINKTYPE_HIPPI_INT=111
LINKTYPE_HIPPI_PACKED_BE=struct.pack(">I",111)
LINKTYPE_HIPPI_PACKED_LE=struct.pack("<I",111)
LINKTYPE_HIPPI_STRING="LINKTYPE_HIPPI"

LINKTYPE_HDLC_INT=112
LINKTYPE_HDLC_PACKED_BE=struct.pack(">I",112)
LINKTYPE_HDLC_PACKED_LE=struct.pack("<I",112)
LINKTYPE_HDLC_STRING="LINKTYPE_HDLC"

LINKTYPE_LINUX_SLL_INT=113
LINKTYPE_LINUX_SLL_PACKED_BE=struct.pack(">I",113)
LINKTYPE_LINUX_SLL_PACKED_LE=struct.pack("<I",113)
LINKTYPE_LINUX_SLL_STRING="LINKTYPE_LINUX_SLL"

LINKTYPE_LTALK_INT=114
LINKTYPE_LTALK_PACKED_BE=struct.pack(">I",114)
LINKTYPE_LTALK_PACKED_LE=struct.pack("<I",114)
LINKTYPE_LTALK_STRING="LINKTYPE_LTALK"

LINKTYPE_ECONET_INT=115
LINKTYPE_ECONET_PACKED_BE=struct.pack(">I",115)
LINKTYPE_ECONET_PACKED_LE=struct.pack("<I",115)
LINKTYPE_ECONET_STRING="LINKTYPE_ECONET"

LINKTYPE_IPFILTER_INT=116
LINKTYPE_IPFILTER_PACKED_BE=struct.pack(">I",116)
LINKTYPE_IPFILTER_PACKED_LE=struct.pack("<I",116)
LINKTYPE_IPFILTER_STRING="LINKTYPE_IPFILTER"

LINKTYPE_PFLOG_INT=117
LINKTYPE_PFLOG_PACKED_BE=struct.pack(">I",117)
LINKTYPE_PFLOG_PACKED_LE=struct.pack("<I",117)
LINKTYPE_PFLOG_STRING="LINKTYPE_PFLOG"

LINKTYPE_CISCO_IOS_INT=118
LINKTYPE_CISCO_IOS_PACKED_BE=struct.pack(">I",118)
LINKTYPE_CISCO_IOS_PACKED_LE=struct.pack("<I",118)
LINKTYPE_CISCO_IOS_STRING="LINKTYPE_CISCO_IOS"

LINKTYPE_PRISM_HEADER_INT=119
LINKTYPE_PRISM_HEADER_PACKED_BE=struct.pack(">I",119)
LINKTYPE_PRISM_HEADER_PACKED_LE=struct.pack("<I",119)
LINKTYPE_PRISM_HEADER_STRING="LINKTYPE_PRISM_HEADER"

LINKTYPE_AIRONET_HEADER_INT=120
LINKTYPE_AIRONET_HEADER_PACKED_BE=struct.pack(">I",120)
LINKTYPE_AIRONET_HEADER_PACKED_LE=struct.pack("<I",120)
LINKTYPE_AIRONET_HEADER_STRING="LINKTYPE_AIRONET_HEADER"

LINKTYPE_HHDLC_INT=121
LINKTYPE_HHDLC_PACKED_BE=struct.pack(">I",121)
LINKTYPE_HHDLC_PACKED_LE=struct.pack("<I",121)
LINKTYPE_HHDLC_STRING="LINKTYPE_HHDLC"

LINKTYPE_IP_OVER_FC_INT=122
LINKTYPE_IP_OVER_FC_PACKED_BE=struct.pack(">I",122)
LINKTYPE_IP_OVER_FC_PACKED_LE=struct.pack("<I",122)
LINKTYPE_IP_OVER_FC_STRING="LINKTYPE_IP_OVER_FC"

LINKTYPE_SUNATM_INT=123
LINKTYPE_SUNATM_PACKED_BE=struct.pack(">I",123)
LINKTYPE_SUNATM_PACKED_LE=struct.pack("<I",123)
LINKTYPE_SUNATM_STRING="LINKTYPE_SUNATM"

LINKTYPE_RIO_INT=124
LINKTYPE_RIO_PACKED_BE=struct.pack(">I",124)
LINKTYPE_RIO_PACKED_LE=struct.pack("<I",124)
LINKTYPE_RIO_STRING="LINKTYPE_RIO"

LINKTYPE_PCI_EXP_INT=125
LINKTYPE_PCI_EXP_PACKED_BE=struct.pack(">I",125)
LINKTYPE_PCI_EXP_PACKED_LE=struct.pack("<I",125)
LINKTYPE_PCI_EXP_STRING="LINKTYPE_PCI_EXP"

LINKTYPE_AURORA_INT=126
LINKTYPE_AURORA_PACKED_BE=struct.pack(">I",126)
LINKTYPE_AURORA_PACKED_LE=struct.pack("<I",126)
LINKTYPE_AURORA_STRING="LINKTYPE_AURORA"

LINKTYPE_IEEE802_11_RADIO_INT=127
LINKTYPE_IEEE802_11_RADIO_PACKED_BE=struct.pack(">I",127)
LINKTYPE_IEEE802_11_RADIO_PACKED_LE=struct.pack("<I",127)
LINKTYPE_IEEE802_11_RADIO_STRING="LINKTYPE_IEEE802_11_RADIO"

LINKTYPE_TZSP_INT=128
LINKTYPE_TZSP_PACKED_BE=struct.pack(">I",128)
LINKTYPE_TZSP_PACKED_LE=struct.pack("<I",128)
LINKTYPE_TZSP_STRING="LINKTYPE_TZSP"

LINKTYPE_ARCNET_LINUX_INT=129
LINKTYPE_ARCNET_LINUX_PACKED_BE=struct.pack(">I",129)
LINKTYPE_ARCNET_LINUX_PACKED_LE=struct.pack("<I",129)
LINKTYPE_ARCNET_LINUX_STRING="LINKTYPE_ARCNET_LINUX"

LINKTYPE_JUNIPER_MLPPP_INT=130
LINKTYPE_JUNIPER_MLPPP_PACKED_BE=struct.pack(">I",130)
LINKTYPE_JUNIPER_MLPPP_PACKED_LE=struct.pack("<I",130)
LINKTYPE_JUNIPER_MLPPP_STRING="LINKTYPE_JUNIPER_MLPPP"

LINKTYPE_JUNIPER_MLFR_INT=131
LINKTYPE_JUNIPER_MLFR_PACKED_BE=struct.pack(">I",131)
LINKTYPE_JUNIPER_MLFR_PACKED_LE=struct.pack("<I",131)
LINKTYPE_JUNIPER_MLFR_STRING="LINKTYPE_JUNIPER_MLFR"

LINKTYPE_JUNIPER_ES_INT=132
LINKTYPE_JUNIPER_ES_PACKED_BE=struct.pack(">I",132)
LINKTYPE_JUNIPER_ES_PACKED_LE=struct.pack("<I",132)
LINKTYPE_JUNIPER_ES_STRING="LINKTYPE_JUNIPER_ES"

LINKTYPE_JUNIPER_GGSN_INT=133
LINKTYPE_JUNIPER_GGSN_PACKED_BE=struct.pack(">I",133)
LINKTYPE_JUNIPER_GGSN_PACKED_LE=struct.pack("<I",133)
LINKTYPE_JUNIPER_GGSN_STRING="LINKTYPE_JUNIPER_GGSN"

LINKTYPE_JUNIPER_MFR_INT=134
LINKTYPE_JUNIPER_MFR_PACKED_BE=struct.pack(">I",134)
LINKTYPE_JUNIPER_MFR_PACKED_LE=struct.pack("<I",134)
LINKTYPE_JUNIPER_MFR_STRING="LINKTYPE_JUNIPER_MFR"

LINKTYPE_JUNIPER_ATM2_INT=135
LINKTYPE_JUNIPER_ATM2_PACKED_BE=struct.pack(">I",135)
LINKTYPE_JUNIPER_ATM2_PACKED_LE=struct.pack("<I",135)
LINKTYPE_JUNIPER_ATM2_STRING="LINKTYPE_JUNIPER_ATM2"

LINKTYPE_JUNIPER_SERVICES_INT=136
LINKTYPE_JUNIPER_SERVICES_PACKED_BE=struct.pack(">I",136)
LINKTYPE_JUNIPER_SERVICES_PACKED_LE=struct.pack("<I",136)
LINKTYPE_JUNIPER_SERVICES_STRING="LINKTYPE_JUNIPER_SERVICES"

LINKTYPE_JUNIPER_ATM1_INT=137
LINKTYPE_JUNIPER_ATM1_PACKED_BE=struct.pack(">I",137)
LINKTYPE_JUNIPER_ATM1_PACKED_LE=struct.pack("<I",137)
LINKTYPE_JUNIPER_ATM1_STRING="LINKTYPE_JUNIPER_ATM1"

LINKTYPE_APPLE_IP_OVER_IEEE1394_INT=138
LINKTYPE_APPLE_IP_OVER_IEEE1394_PACKED_BE=struct.pack(">I",138)
LINKTYPE_APPLE_IP_OVER_IEEE1394_PACKED_LE=struct.pack("<I",138)
LINKTYPE_APPLE_IP_OVER_IEEE1394_STRING="LINKTYPE_APPLE_IP_OVER_IEEE1394"

LINKTYPE_MTP2_WITH_PHDR_INT=139
LINKTYPE_MTP2_WITH_PHDR_PACKED_BE=struct.pack(">I",139)
LINKTYPE_MTP2_WITH_PHDR_PACKED_LE=struct.pack("<I",139)
LINKTYPE_MTP2_WITH_PHDR_STRING="LINKTYPE_MTP2_WITH_PHDR"

LINKTYPE_MTP2_INT=140
LINKTYPE_MTP2_PACKED_BE=struct.pack(">I",140)
LINKTYPE_MTP2_PACKED_LE=struct.pack("<I",140)
LINKTYPE_MTP2_STRING="LINKTYPE_MTP2"

LINKTYPE_MTP3_INT=141
LINKTYPE_MTP3_PACKED_BE=struct.pack(">I",141)
LINKTYPE_MTP3_PACKED_LE=struct.pack("<I",141)
LINKTYPE_MTP3_STRING="LINKTYPE_MTP3"

LINKTYPE_SCCP_INT=142
LINKTYPE_SCCP_PACKED_BE=struct.pack(">I",142)
LINKTYPE_SCCP_PACKED_LE=struct.pack("<I",142)
LINKTYPE_SCCP_STRING="LINKTYPE_SCCP"

LINKTYPE_DOCSIS_INT=143
LINKTYPE_DOCSIS_PACKED_BE=struct.pack(">I",143)
LINKTYPE_DOCSIS_PACKED_LE=struct.pack("<I",143)
LINKTYPE_DOCSIS_STRING="LINKTYPE_DOCSIS"

LINKTYPE_LINUX_IRDA_INT=144
LINKTYPE_LINUX_IRDA_PACKED_BE=struct.pack(">I",144)
LINKTYPE_LINUX_IRDA_PACKED_LE=struct.pack("<I",144)
LINKTYPE_LINUX_IRDA_STRING="LINKTYPE_LINUX_IRDA"

LINKTYPE_IBM_SP_INT=145
LINKTYPE_IBM_SP_PACKED_BE=struct.pack(">I",145)
LINKTYPE_IBM_SP_PACKED_LE=struct.pack("<I",145)
LINKTYPE_IBM_SP_STRING="LINKTYPE_IBM_SP"

LINKTYPE_IEEE802_11_AVS_INT=163
LINKTYPE_IEEE802_11_AVS_PACKED_BE=struct.pack(">I",163)
LINKTYPE_IEEE802_11_AVS_PACKED_LE=struct.pack("<I",163)
LINKTYPE_IEEE802_11_AVS_STRING="LINKTYPE_IEEE802_11_AVS"

LINKTYPE_BACNET_MS_TP_INT=165
LINKTYPE_BACNET_MS_TP_PACKED_BE=struct.pack(">I",165)
LINKTYPE_BACNET_MS_TP_PACKED_LE=struct.pack("<I",165)
LINKTYPE_BACNET_MS_TP_STRING="LINKTYPE_BACNET_MS_TP"

LINKTYPE_PPP_PPPD_INT=166
LINKTYPE_PPP_PPPD_PACKED_BE=struct.pack(">I",166)
LINKTYPE_PPP_PPPD_PACKED_LE=struct.pack("<I",166)
LINKTYPE_PPP_PPPD_STRING="LINKTYPE_PPP_PPPD"

LINKTYPE_GPRS_LLC_INT=169
LINKTYPE_GPRS_LLC_PACKED_BE=struct.pack(">I",169)
LINKTYPE_GPRS_LLC_PACKED_LE=struct.pack("<I",169)
LINKTYPE_GPRS_LLC_STRING="LINKTYPE_GPRS_LLC"

LINKTYPE_GPF_T_INT=170
LINKTYPE_GPF_T_PACKED_BE=struct.pack(">I",170)
LINKTYPE_GPF_T_PACKED_LE=struct.pack("<I",170)
LINKTYPE_GPF_T_STRING="LINKTYPE_GPF_T"

LINKTYPE_GPF_F_INT=171
LINKTYPE_GPF_F_PACKED_BE=struct.pack(">I",171)
LINKTYPE_GPF_F_PACKED_LE=struct.pack("<I",171)
LINKTYPE_GPF_F_STRING="LINKTYPE_GPF_F"

LINKTYPE_LINUX_LAPD_INT=177
LINKTYPE_LINUX_LAPD_PACKED_BE=struct.pack(">I",177)
LINKTYPE_LINUX_LAPD_PACKED_LE=struct.pack("<I",177)
LINKTYPE_LINUX_LAPD_STRING="LINKTYPE_LINUX_LAPD"

LINKTYPE_BLUETOOTH_HCI_H4_INT=187
LINKTYPE_BLUETOOTH_HCI_H4_PACKED_BE=struct.pack(">I",187)
LINKTYPE_BLUETOOTH_HCI_H4_PACKED_LE=struct.pack("<I",187)
LINKTYPE_BLUETOOTH_HCI_H4_STRING="LINKTYPE_BLUETOOTH_HCI_H4"

LINKTYPE_USB_LINUX_INT=189
LINKTYPE_USB_LINUX_PACKED_BE=struct.pack(">I",189)
LINKTYPE_USB_LINUX_PACKED_LE=struct.pack("<I",189)
LINKTYPE_USB_LINUX_STRING="LINKTYPE_USB_LINUX"

LINKTYPE_PPI_INT=192
LINKTYPE_PPI_PACKED_BE=struct.pack(">I",192)
LINKTYPE_PPI_PACKED_LE=struct.pack("<I",192)
LINKTYPE_PPI_STRING="LINKTYPE_PPI"

LINKTYPE_IEEE802_15_4_INT=195
LINKTYPE_IEEE802_15_4_PACKED_BE=struct.pack(">I",195)
LINKTYPE_IEEE802_15_4_PACKED_LE=struct.pack("<I",195)
LINKTYPE_IEEE802_15_4_STRING="LINKTYPE_IEEE802_15_4"

LINKTYPE_SITA_INT=196
LINKTYPE_SITA_PACKED_BE=struct.pack(">I",196)
LINKTYPE_SITA_PACKED_LE=struct.pack("<I",196)
LINKTYPE_SITA_STRING="LINKTYPE_SITA"

LINKTYPE_ERF_INT=197
LINKTYPE_ERF_PACKED_BE=struct.pack(">I",197)
LINKTYPE_ERF_PACKED_LE=struct.pack("<I",197)
LINKTYPE_ERF_STRING="LINKTYPE_ERF"

LINKTYPE_BLUETOOTH_HCI_H4_WITH_PHDR_INT=201
LINKTYPE_BLUETOOTH_HCI_H4_WITH_PHDR_PACKED_BE=struct.pack(">I",201)
LINKTYPE_BLUETOOTH_HCI_H4_WITH_PHDR_PACKED_LE=struct.pack("<I",201)
LINKTYPE_BLUETOOTH_HCI_H4_WITH_PHDR_STRING="LINKTYPE_BLUETOOTH_HCI_H4_WITH_PHDR"

LINKTYPE_AX25_KISS_INT=202
LINKTYPE_AX25_KISS_PACKED_BE=struct.pack(">I",202)
LINKTYPE_AX25_KISS_PACKED_LE=struct.pack("<I",202)
LINKTYPE_AX25_KISS_STRING="LINKTYPE_AX25_KISS"

LINKTYPE_LAPD_INT=203
LINKTYPE_LAPD_PACKED_BE=struct.pack(">I",203)
LINKTYPE_LAPD_PACKED_LE=struct.pack("<I",203)
LINKTYPE_LAPD_STRING="LINKTYPE_LAPD"

LINKTYPE_PPP_WITH_DIR_INT=204
LINKTYPE_PPP_WITH_DIR_PACKED_BE=struct.pack(">I",204)
LINKTYPE_PPP_WITH_DIR_PACKED_LE=struct.pack("<I",204)
LINKTYPE_PPP_WITH_DIR_STRING="LINKTYPE_PPP_WITH_DIR"

LINKTYPE_C_HDLC_WITH_DIR_INT=205
LINKTYPE_C_HDLC_WITH_DIR_PACKED_BE=struct.pack(">I",205)
LINKTYPE_C_HDLC_WITH_DIR_PACKED_LE=struct.pack("<I",205)
LINKTYPE_C_HDLC_WITH_DIR_STRING="LINKTYPE_C_HDLC_WITH_DIR"

LINKTYPE_FRELAY_WITH_DIR_INT=206
LINKTYPE_FRELAY_WITH_DIR_PACKED_BE=struct.pack(">I",206)
LINKTYPE_FRELAY_WITH_DIR_PACKED_LE=struct.pack("<I",206)
LINKTYPE_FRELAY_WITH_DIR_STRING="LINKTYPE_FRELAY_WITH_DIR"

LINKTYPE_IPMB_LINUX_INT=209
LINKTYPE_IPMB_LINUX_PACKED_BE=struct.pack(">I",209)
LINKTYPE_IPMB_LINUX_PACKED_LE=struct.pack("<I",209)
LINKTYPE_IPMB_LINUX_STRING="LINKTYPE_IPMB_LINUX"

LINKTYPE_IEEE802_15_4_NONASK_PHY_INT=215
LINKTYPE_IEEE802_15_4_NONASK_PHY_PACKED_BE=struct.pack(">I",215)
LINKTYPE_IEEE802_15_4_NONASK_PHY_PACKED_LE=struct.pack("<I",215)
LINKTYPE_IEEE802_15_4_NONASK_PHY_STRING="LINKTYPE_IEEE802_15_4_NONASK_PHY"

LINKTYPE_USB_LINUX_MMAPPED_INT=220
LINKTYPE_USB_LINUX_MMAPPED_PACKED_BE=struct.pack(">I",220)
LINKTYPE_USB_LINUX_MMAPPED_PACKED_LE=struct.pack("<I",220)
LINKTYPE_USB_LINUX_MMAPPED_STRING="LINKTYPE_USB_LINUX_MMAPPED"

LINKTYPE_FC_2_INT=224
LINKTYPE_FC_2_PACKED_BE=struct.pack(">I",224)
LINKTYPE_FC_2_PACKED_LE=struct.pack("<I",224)
LINKTYPE_FC_2_STRING="LINKTYPE_FC_2"

LINKTYPE_FC_2_WITH_FRAME_DELIMS_INT=225
LINKTYPE_FC_2_WITH_FRAME_DELIMS_PACKED_BE=struct.pack(">I",225)
LINKTYPE_FC_2_WITH_FRAME_DELIMS_PACKED_LE=struct.pack("<I",225)
LINKTYPE_FC_2_WITH_FRAME_DELIMS_STRING="LINKTYPE_FC_2_WITH_FRAME_DELIMS"

LINKTYPE_IPNET_INT=226
LINKTYPE_IPNET_PACKED_BE=struct.pack(">I",226)
LINKTYPE_IPNET_PACKED_LE=struct.pack("<I",226)
LINKTYPE_IPNET_STRING="LINKTYPE_IPNET"

LINKTYPE_CAN_SOCKETCAN_INT=227
LINKTYPE_CAN_SOCKETCAN_PACKED_BE=struct.pack(">I",227)
LINKTYPE_CAN_SOCKETCAN_PACKED_LE=struct.pack("<I",227)
LINKTYPE_CAN_SOCKETCAN_STRING="LINKTYPE_CAN_SOCKETCAN"

LINKTYPE_IPV4_INT=228
LINKTYPE_IPV4_PACKED_BE=struct.pack(">I",228)
LINKTYPE_IPV4_PACKED_LE=struct.pack("<I",228)
LINKTYPE_IPV4_STRING="LINKTYPE_IPV4"

LINKTYPE_IPV6_INT=229
LINKTYPE_IPV6_PACKED_BE=struct.pack(">I",229)
LINKTYPE_IPV6_PACKED_LE=struct.pack("<I",229)
LINKTYPE_IPV6_STRING="LINKTYPE_IPV6"

LINKTYPE_IEEE802_15_4_NOFCS_INT=230
LINKTYPE_IEEE802_15_4_NOFCS_PACKED_BE=struct.pack(">I",230)
LINKTYPE_IEEE802_15_4_NOFCS_PACKED_LE=struct.pack("<I",230)
LINKTYPE_IEEE802_15_4_NOFCS_STRING="LINKTYPE_IEEE802_15_4_NOFCS"

LINKTYPE_DBUS_INT=231
LINKTYPE_DBUS_PACKED_BE=struct.pack(">I",231)
LINKTYPE_DBUS_PACKED_LE=struct.pack("<I",231)
LINKTYPE_DBUS_STRING="LINKTYPE_DBUS"

LINKTYPE_DVB_CI_INT=235
LINKTYPE_DVB_CI_PACKED_BE=struct.pack(">I",235)
LINKTYPE_DVB_CI_PACKED_LE=struct.pack("<I",235)
LINKTYPE_DVB_CI_STRING="LINKTYPE_DVB_CI"

LINKTYPE_MUX27010_INT=236
LINKTYPE_MUX27010_PACKED_BE=struct.pack(">I",236)
LINKTYPE_MUX27010_PACKED_LE=struct.pack("<I",236)
LINKTYPE_MUX27010_STRING="LINKTYPE_MUX27010"

LINKTYPE_STANAG_5066_D_PDU_INT=237
LINKTYPE_STANAG_5066_D_PDU_PACKED_BE=struct.pack(">I",237)
LINKTYPE_STANAG_5066_D_PDU_PACKED_LE=struct.pack("<I",237)
LINKTYPE_STANAG_5066_D_PDU_STRING="LINKTYPE_STANAG_5066_D_PDU"

LINKTYPE_NFLOG_INT=239
LINKTYPE_NFLOG_PACKED_BE=struct.pack(">I",239)
LINKTYPE_NFLOG_PACKED_LE=struct.pack("<I",239)
LINKTYPE_NFLOG_STRING="LINKTYPE_NFLOG"

LINKTYPE_NETANALYZER_INT=240
LINKTYPE_NETANALYZER_PACKED_BE=struct.pack(">I",240)
LINKTYPE_NETANALYZER_PACKED_LE=struct.pack("<I",240)
LINKTYPE_NETANALYZER_STRING="LINKTYPE_NETANALYZER"

LINKTYPE_NETANALYZER_TRANSPARENT_INT=241
LINKTYPE_NETANALYZER_TRANSPARENT_PACKED_BE=struct.pack(">I",241)
LINKTYPE_NETANALYZER_TRANSPARENT_PACKED_LE=struct.pack("<I",241)
LINKTYPE_NETANALYZER_TRANSPARENT_STRING="LINKTYPE_NETANALYZER_TRANSPARENT"

LINKTYPE_IPOIB_INT=242
LINKTYPE_IPOIB_PACKED_BE=struct.pack(">I",242)
LINKTYPE_IPOIB_PACKED_LE=struct.pack("<I",242)
LINKTYPE_IPOIB_STRING="LINKTYPE_IPOIB"

LINKTYPE_MPEG_2_TS_INT=243
LINKTYPE_MPEG_2_TS_PACKED_BE=struct.pack(">I",243)
LINKTYPE_MPEG_2_TS_PACKED_LE=struct.pack("<I",243)
LINKTYPE_MPEG_2_TS_STRING="LINKTYPE_MPEG_2_TS"

LINKTYPE_NG40_INT=244
LINKTYPE_NG40_PACKED_BE=struct.pack(">I",244)
LINKTYPE_NG40_PACKED_LE=struct.pack("<I",244)
LINKTYPE_NG40_STRING="LINKTYPE_NG40"

LINKTYPE_NFC_LLCP_INT=245
LINKTYPE_NFC_LLCP_PACKED_BE=struct.pack(">I",245)
LINKTYPE_NFC_LLCP_PACKED_LE=struct.pack("<I",245)
LINKTYPE_NFC_LLCP_STRING="LINKTYPE_NFC_LLCP"

LINKTYPE_INFINIBAND_INT=247
LINKTYPE_INFINIBAND_PACKED_BE=struct.pack(">I",247)
LINKTYPE_INFINIBAND_PACKED_LE=struct.pack("<I",247)
LINKTYPE_INFINIBAND_STRING="LINKTYPE_INFINIBAND"

LINKTYPE_SCTP_INT=248
LINKTYPE_SCTP_PACKED_BE=struct.pack(">I",248)
LINKTYPE_SCTP_PACKED_LE=struct.pack("<I",248)
LINKTYPE_SCTP_STRING="LINKTYPE_SCTP"

LINKTYPE_USBPCAP_INT=249
LINKTYPE_USBPCAP_PACKED_BE=struct.pack(">I",249)
LINKTYPE_USBPCAP_PACKED_LE=struct.pack("<I",249)
LINKTYPE_USBPCAP_STRING="LINKTYPE_USBPCAP"

LINKTYPE_RTAC_SERIAL_INT=250
LINKTYPE_RTAC_SERIAL_PACKED_BE=struct.pack(">I",250)
LINKTYPE_RTAC_SERIAL_PACKED_LE=struct.pack("<I",250)
LINKTYPE_RTAC_SERIAL_STRING="LINKTYPE_RTAC_SERIAL"

LINKTYPE_BLUETOOTH_LE_LL_INT=251
LINKTYPE_BLUETOOTH_LE_LL_PACKED_BE=struct.pack(">I",251)
LINKTYPE_BLUETOOTH_LE_LL_PACKED_LE=struct.pack("<I",251)
LINKTYPE_BLUETOOTH_LE_LL_STRING="LINKTYPE_BLUETOOTH_LE_LL"

LINKTYPE_NETLINK_INT=253
LINKTYPE_NETLINK_PACKED_BE=struct.pack(">I",253)
LINKTYPE_NETLINK_PACKED_LE=struct.pack("<I",253)
LINKTYPE_NETLINK_STRING="LINKTYPE_NETLINK"

LINKTYPE_BLUETOOTH_LINUX_MONITOR_INT=254
LINKTYPE_BLUETOOTH_LINUX_MONITOR_PACKED_BE=struct.pack(">I",254)
LINKTYPE_BLUETOOTH_LINUX_MONITOR_PACKED_LE=struct.pack("<I",254)
LINKTYPE_BLUETOOTH_LINUX_MONITOR_STRING="LINKTYPE_BLUETOOTH_LINUX_MONITOR"

LINKTYPE_BLUETOOTH_BREDR_BB_INT=255
LINKTYPE_BLUETOOTH_BREDR_BB_PACKED_BE=struct.pack(">I",255)
LINKTYPE_BLUETOOTH_BREDR_BB_PACKED_LE=struct.pack("<I",255)
LINKTYPE_BLUETOOTH_BREDR_BB_STRING="LINKTYPE_BLUETOOTH_BREDR_BB"

LINKTYPE_BLUETOOTH_LE_LL_WITH_PHDR_INT=256
LINKTYPE_BLUETOOTH_LE_LL_WITH_PHDR_PACKED_BE=struct.pack(">I",256)
LINKTYPE_BLUETOOTH_LE_LL_WITH_PHDR_PACKED_LE=struct.pack("<I",256)
LINKTYPE_BLUETOOTH_LE_LL_WITH_PHDR_STRING="LINKTYPE_BLUETOOTH_LE_LL_WITH_PHDR"

LINKTYPE_PROFIBUS_DL_INT=257
LINKTYPE_PROFIBUS_DL_PACKED_BE=struct.pack(">I",257)
LINKTYPE_PROFIBUS_DL_PACKED_LE=struct.pack("<I",257)
LINKTYPE_PROFIBUS_DL_STRING="LINKTYPE_PROFIBUS_DL"

LINKTYPE_PKTAP_INT=258
LINKTYPE_PKTAP_PACKED_BE=struct.pack(">I",258)
LINKTYPE_PKTAP_PACKED_LE=struct.pack("<I",258)
LINKTYPE_PKTAP_STRING="LINKTYPE_PKTAP"

LINKTYPE_EPON_INT=259
LINKTYPE_EPON_PACKED_BE=struct.pack(">I",259)
LINKTYPE_EPON_PACKED_LE=struct.pack("<I",259)
LINKTYPE_EPON_STRING="LINKTYPE_EPON"

LINKTYPE_IPMI_HPM_2_INT=260
LINKTYPE_IPMI_HPM_2_PACKED_BE=struct.pack(">I",260)
LINKTYPE_IPMI_HPM_2_PACKED_LE=struct.pack("<I",260)
LINKTYPE_IPMI_HPM_2_STRING="LINKTYPE_IPMI_HPM_2"

LINKTYPE_ZWAVE_R1_R2_INT=261
LINKTYPE_ZWAVE_R1_R2_PACKED_BE=struct.pack(">I",261)
LINKTYPE_ZWAVE_R1_R2_PACKED_LE=struct.pack("<I",261)
LINKTYPE_ZWAVE_R1_R2_STRING="LINKTYPE_ZWAVE_R1_R2"

LINKTYPE_ZWAVE_R3_INT=262
LINKTYPE_ZWAVE_R3_PACKED_BE=struct.pack(">I",262)
LINKTYPE_ZWAVE_R3_PACKED_LE=struct.pack("<I",262)
LINKTYPE_ZWAVE_R3_STRING="LINKTYPE_ZWAVE_R3"

LINKTYPE_WATTSTOPPER_DLM_INT=263
LINKTYPE_WATTSTOPPER_DLM_PACKED_BE=struct.pack(">I",263)
LINKTYPE_WATTSTOPPER_DLM_PACKED_LE=struct.pack("<I",263)
LINKTYPE_WATTSTOPPER_DLM_STRING="LINKTYPE_WATTSTOPPER_DLM"

LINKTYPE_ISO_14443_INT=264
LINKTYPE_ISO_14443_PACKED_BE=struct.pack(">I",264)
LINKTYPE_ISO_14443_PACKED_LE=struct.pack("<I",264)
LINKTYPE_ISO_14443_STRING="LINKTYPE_ISO_14443"

LINKTYPE_RDS_INT=265
LINKTYPE_RDS_PACKED_BE=struct.pack(">I",265)
LINKTYPE_RDS_PACKED_LE=struct.pack("<I",265)
LINKTYPE_RDS_STRING="LINKTYPE_RDS"